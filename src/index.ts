import {
  app,
  BrowserWindow,
  dialog,
  ipcMain,
  IpcMainInvokeEvent,
} from "electron";
import path from "node:path";
import { writeFile } from "node:fs";
import xlsx from "node-xlsx";
import { Config } from "./services/store-config";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const dataToRow = (data: string[]): string[][] => {
  return data.map((item) => {
    return [item];
  });
};

const config = new Config();

const handleFileSave = async (e: IpcMainInvokeEvent, data: string[]) => {
  let defaultDirectory = config.get("lastSavePath");
  if (typeof defaultDirectory !== "string") {
    try {
      defaultDirectory = app.getPath("downloads");
    } catch (e) {
      defaultDirectory = app.getPath("home");
    }
  }

  const today = new Date();
  const year = today.getFullYear();
  const month = (today.getMonth() + 1).toString().padStart(2, "0");
  const day = today.getDate();
  const hour = today.getHours();
  const minute = today.getMinutes();

  const suffix = process.env.FILLESUFFIX || "Record";
  console.log(suffix);

  const defaultFileName = `${suffix}_${year}${month}${day}_${hour}${minute}.xlsx`;

  const { canceled, filePath } = await dialog.showSaveDialog({
    defaultPath: path.join(defaultDirectory, defaultFileName),
    properties: ["createDirectory"],
  });
  if (canceled) return;

  config.set("lastSavePath", path.dirname(filePath));
  const rowData = dataToRow(data);
  const buffer = xlsx.build([
    { name: defaultFileName, data: rowData, options: {} },
  ]);

  writeFile(filePath, buffer, (e) => {
    if (e) {
      console.log(e);
    }
    console.log("completed");
  });
};

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    show: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  mainWindow.on("show", () => {
    // macos doesn't automatically focus after re-create a window on activate
    mainWindow.focus();
  });

  mainWindow.removeMenu();
  mainWindow.maximize();

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  ipcMain.handle("dialog:saveFile", handleFileSave);
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
